{"version":3,"sources":["model/index.ts","model/TransmissionState.tsx","components/Header/Header.tsx","config.js","services/AbstractService.tsx","services/IssInformationService.tsx","components/ImageWithPlaceholder/ImageWithPlaceholder.tsx","components/Content/IssRouteMap/IssRouteMap.tsx","components/Content/IssSpeed/IssSpeed.tsx","components/Content/Content.tsx","services/GitService.tsx","components/Footer/VersionPresenter/VersionPresenter.tsx","components/Footer/Footer.tsx","pages/Home/Home.tsx","serviceWorker.js","index.js"],"names":["TransmissionState","Header","Navbar","className","Component","config","AbstractService","BASE_API","response","ok","Error","statusText","IssInformationService","_informationSubject","_routeMapUrl","Subject","fetch","this","then","handleErrors","json","next","catch","error","console","log","message","undefined","mode","blob","blobImage","URL","createObjectURL","asObservable","ImageWithPlaceholder","props","initialState","src","state","src$","subscribe","setState","Spinner","animation","role","Image","createPlaceholderImage","dimensions","fluid","encodeURIComponent","width","height","renderImage","renderPlaceholder","imageDimensions","RouteMapImage","issInformationService","ISS_INFORMATION_UNAVAILABLE_IMAGE_PATH","_routeMapUrl$","_redirectRouteMapUrl$","routeMapUrl","handleRouteMapUrlUpdate","getRouteMapUrl","receivedRouteMapUrl","IssSpeed","WAITING","_issInformation$","information","issInformation","RECEIVED","getInformation","averageSpeed","toLocaleString","maximumFractionDigits","formatAverageSpeed","renderAverageSpeedNotAvailable","renderAverageSpeed","Content","Container","Row","Col","GitService","_gitPropertiesSubject","content","VersionPresenter","gitService","_gitProperties$","gitProperties","getProperties","commitIdAbbrev","commitTime","Footer","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c16eada.chunk.js","sourcesContent":["export * from './Dimensions';\nexport * from './IssInformation';\nexport * from './GitProperties';\nexport * from './TransmissionState';\n","export enum TransmissionState {\n    WAITING,\n    RECEIVED\n}\n","import React, { Component } from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport './Header.scss';\n\nexport default class Header extends Component {\n    render() : JSX.Element {\n        return (\n            <Navbar\n                className='d-flex justify-content-center ist-navbar'>\n                <span className='ist-navbar-brand'>ISS Tracker</span>\n            </Navbar>\n        );\n    }\n}\n","const dev = {\n    'backend-base-server': 'http://localhost:8080'\n};\n\nconst prod = {\n    'backend-base-server': 'https://marceloleite2604-iss-tracker.herokuapp.com'\n};\n\nconst config = process.env.REACT_APP_STAGE === 'production' ? prod : dev;\n\nexport default {\n    'api-base-path': '/api/v1',\n    ...config\n};\n","import config from '../config';\n\nexport abstract class AbstractService {\n    readonly BASE_API = config['backend-base-server'] + config['api-base-path'];\n\n    handleErrors(response: Response) : Response {\n        if (!response.ok) {\n            throw Error(response.statusText);\n        }\n        return response;\n    }\n}\n","import { Subject, Observable } from 'rxjs';\nimport { IssInformation } from '../model';\nimport { AbstractService } from './AbstractService';\n\nexport default class IssInformationService extends AbstractService {\n    private _informationSubject : Subject<IssInformation>;\n\n    private _routeMapUrl : Subject<string>;\n\n    constructor() {\n        super();\n        this._informationSubject = new Subject<IssInformation>();\n        this._routeMapUrl = new Subject<string>();\n    }\n\n    get information() : Observable<IssInformation> {\n        return this._informationSubject.asObservable();\n    }\n\n    get routeMapUrl() : Observable<string> {\n        return this._routeMapUrl.asObservable();\n    }\n\n    getInformation() : void {\n        fetch(`${this.BASE_API}/iss-information`)\n            .then(response => this.handleErrors(response))\n            .then(response => response.json())\n            .then((response: IssInformation) => this._informationSubject.next(response))\n            .catch(error => {\n                console.log((error as Error).message);\n                this._informationSubject.next(undefined);\n            });\n    }\n\n    getRouteMapUrl() : void {\n        fetch(`${this.BASE_API}/map`, { mode: 'cors' })\n            .then(response => this.handleErrors(response))\n            .then(response => response.blob())\n            .then(blobImage => this._routeMapUrl.next(URL.createObjectURL(blobImage)))\n            .catch(error => {\n                console.log((error as Error).message);\n                this._routeMapUrl.next(undefined);\n            });\n    }\n}\n","import React, { Component } from 'react';\nimport { Observable } from 'rxjs';\nimport { Spinner, Image } from 'react-bootstrap';\nimport { Dimensions } from '../../model';\nimport './ImageWithPlaceholder.css';\n\ninterface ImageWithPlaceholderProps {\n    src$: Observable<string>\n    dimensions: Dimensions\n}\n\ninterface ImageWithPlaceholderState {\n    src: string\n}\n\nexport default class ImageWithPlaceholder extends Component<ImageWithPlaceholderProps, ImageWithPlaceholderState> {\n    private readonly initialState = {\n        src: ''\n    } as ImageWithPlaceholderState;\n\n    state : ImageWithPlaceholderState;\n\n    props : ImageWithPlaceholderProps;\n\n    constructor(props: ImageWithPlaceholderProps) {\n        super(props);\n        this.props = props;\n        this.state = this.initialState;\n    }\n\n    componentDidMount() : void {\n        this.props.src$.subscribe(src => this.setState({ src }));\n    }\n\n    renderPlaceholder() : JSX.Element {\n        return (\n            <div className='ist-iwp-div'>\n                <Spinner\n                    className='ist-iwp-spinner'\n                    animation=\"border\"\n                    role=\"status\" />\n                <Image\n                    src={this.createPlaceholderImage(this.props.dimensions)}\n                    fluid />\n            </div>\n        );\n    }\n\n    renderImage() : JSX.Element {\n        return (\n            <Image\n                src={this.state.src}\n                fluid />\n        );\n    }\n\n    createPlaceholderImage(dimensions: Dimensions) : string {\n        return 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`\n        <svg \n            width=\"${dimensions.width}\" \n            height=\"${dimensions.height}\" \n            xmlns=\"http://www.w3.org/2000/svg\" \n            viewBox=\"0 0 ${dimensions.width} ${dimensions.height}\" \n            preserveAspectRatio=\"none\">\n            <g>\n                <rect \n                    width=\"${dimensions.width}\" \n                    height=\"${dimensions.height}\"\n                    opacity=\"0.0\" />\n            </g>\n        </svg>\n        `);\n    }\n\n    render() : JSX.Element {\n        if (this.state.src) {\n            return this.renderImage();\n        }\n        return this.renderPlaceholder();\n    }\n}\n","import React, { Component } from 'react';\nimport { Observable, Subject } from 'rxjs';\n\nimport IssInformationService from '../../../services/IssInformationService';\nimport ImageWithPlaceholder from '../../ImageWithPlaceholder/ImageWithPlaceholder';\nimport { Dimensions } from '../../../model';\nimport './IssRouteMap.scss';\n\nconst imageDimensions = {\n    width: 640,\n    height: 421\n} as Dimensions;\n\nexport default class RouteMapImage extends Component {\n    private readonly issInformationService = new IssInformationService();\n\n    private readonly ISS_INFORMATION_UNAVAILABLE_IMAGE_PATH = 'iss-info-unavailable.png';\n\n    private readonly _routeMapUrl$ : Observable<string>;\n\n    private _redirectRouteMapUrl$ : Subject<string>;\n\n    constructor() {\n        super({});\n\n        this._routeMapUrl$ = this.issInformationService.routeMapUrl;\n        this._redirectRouteMapUrl$ = new Subject<string>();\n    }\n\n    componentDidMount() : void {\n        this._routeMapUrl$.subscribe(routeMapUrl => this.handleRouteMapUrlUpdate(routeMapUrl));\n        this.issInformationService.getRouteMapUrl();\n    }\n\n    handleRouteMapUrlUpdate(receivedRouteMapUrl : string) : void {\n        let routeMapUrl = this.ISS_INFORMATION_UNAVAILABLE_IMAGE_PATH;\n        if (receivedRouteMapUrl !== undefined) {\n            routeMapUrl = receivedRouteMapUrl;\n        }\n\n        this._redirectRouteMapUrl$.next(routeMapUrl);\n    }\n\n    render() : JSX.Element {\n        return (\n            <div className='iss-route-map'>\n                <ImageWithPlaceholder\n                    src$={this._redirectRouteMapUrl$.asObservable()}\n                    dimensions={imageDimensions}/>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport IssInformationService from '../../../services/IssInformationService';\nimport { IssInformation, TransmissionState } from '../../../model';\nimport { Observable } from 'rxjs';\n\ntype IssSpeedState = {\n    state: TransmissionState\n    issInformation: IssInformation\n}\n\nexport default class IssSpeed extends Component {\n    readonly initialState : IssSpeedState = {\n        state: TransmissionState.WAITING\n    } as IssSpeedState;\n\n    private readonly issInformationService : IssInformationService;\n\n    private readonly _issInformation$ : Observable<IssInformation>;\n\n    state : IssSpeedState;\n\n    constructor() {\n        super({});\n        this.issInformationService = new IssInformationService();\n        this._issInformation$ = this.issInformationService.information;\n        this.state = this.initialState;\n    }\n\n    componentDidMount() : void {\n        this._issInformation$.subscribe(issInformation => this.setState(\n            {\n                state: TransmissionState.RECEIVED,\n                issInformation\n            }));\n        this.issInformationService.getInformation();\n    }\n\n    formatAverageSpeed(averageSpeed : number) : string {\n        return averageSpeed.toLocaleString(undefined, { maximumFractionDigits: 2 });\n    }\n\n    renderAverageSpeed() : JSX.Element {\n        return (\n            <p>\n                {`ISS is flying at an astonishing speed of \n                ${this.formatAverageSpeed(this.state.issInformation?.averageSpeed ?? 0)} km/h.`}\n            </p>\n        );\n    }\n\n    renderAverageSpeedNotAvailable() : JSX.Element {\n        return (\n            <p>We are trying to calculate ISS average speed. Please try again in a few minutes.</p>\n        );\n    }\n\n    renderPlaceholder() : JSX.Element {\n        return (\n            <p>We are calculating ISS average speed. Please wait...</p>\n        );\n    }\n\n    render() : JSX.Element {\n        if (this.state.state === TransmissionState.WAITING) {\n            return this.renderPlaceholder();\n        } else {\n            if (this.state.issInformation === undefined) {\n                return this.renderAverageSpeedNotAvailable();\n            } else {\n                return this.renderAverageSpeed();\n            }\n        }\n    }\n}\n","import React, { Component } from 'react';\n\nimport { Container, Col, Row } from 'react-bootstrap';\n\nimport IssRouteMap from './IssRouteMap/IssRouteMap';\nimport IssSpeed from './IssSpeed/IssSpeed';\nimport './Content.scss';\n\nclass Content extends Component {\n    render() : JSX.Element {\n        return (\n            <Container>\n                <Row className='ist-row'>\n                    <Col className='d-flex justify-content-center'>\n                        <IssRouteMap />\n                    </Col>\n                </Row>\n                <Row className='ist-row'>\n                    <Col className='d-flex justify-content-center'>\n                        <IssSpeed />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n}\n\nexport default Content;\n","import { GitProperties } from '../model';\nimport { Subject, Observable } from 'rxjs';\nimport { AbstractService } from './AbstractService';\n\nexport default class GitService extends AbstractService {\n    private _gitPropertiesSubject : Subject<GitProperties>;\n\n    constructor() {\n        super();\n        this._gitPropertiesSubject = new Subject<GitProperties>();\n    }\n\n    get gitProperties() : Observable<GitProperties> {\n        return this._gitPropertiesSubject.asObservable();\n    }\n\n    getProperties() : void {\n        fetch(`${this.BASE_API}/git`)\n            .then(response => this.handleErrors(response))\n            .then(response => response.json())\n            .then((content : GitProperties) => this._gitPropertiesSubject.next(content))\n            .catch(error => {\n                console.log((error as Error).message);\n                this._gitPropertiesSubject.next(undefined);\n            });\n    }\n}\n","import React, { Component } from 'react';\nimport GitService from '../../../services/GitService';\nimport { Observable } from 'rxjs';\nimport { GitProperties } from '../../../model';\nimport './VersionPresenter.scss';\n\ntype VersionPresenterState = {\n    gitProperties : GitProperties\n}\n\nexport default class VersionPresenter extends Component<unknown, VersionPresenterState> {\n    private readonly gitService : GitService;\n\n    private readonly _gitProperties$ : Observable<GitProperties>;\n\n    state : VersionPresenterState;\n\n    constructor() {\n        super({});\n        this.gitService = new GitService();\n        this._gitProperties$ = this.gitService.gitProperties;\n        this.state = {} as VersionPresenterState;\n    }\n\n    componentDidMount() : void {\n        this._gitProperties$.subscribe(gitProperties => {\n            console.log('Properties retrieved.');\n            this.setState({ gitProperties });\n        });\n        console.log('Requesting properties.');\n        this.gitService.getProperties();\n    }\n\n    render() : JSX.Element {\n        if (this.state.gitProperties === undefined) {\n            return (<></>);\n        }\n        return (\n            <div className='d-flex flex-column justify-content-end version-presenter'>\n                <div className='d-flex justify-content-end'>\n                    <span>\n                        {`commit id: ${this.state.gitProperties.commitIdAbbrev}`}\n                    </span>\n                </div>\n                <div className='d-flex justify-content-end'>\n                    <span>\n                        {`compiled at: ${this.state.gitProperties.commitTime}`}\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport './Footer.scss';\nimport VersionPresenter from './VersionPresenter/VersionPresenter';\n\nexport default class Footer extends Component {\n    render() : JSX.Element {\n        return (\n            <footer className='d-flex justify-content-end footer '>\n                <VersionPresenter />\n            </footer>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nimport Header from '../../components/Header/Header';\nimport Content from '../../components/Content/Content';\nimport Footer from '../../components/Footer/Footer';\n\nexport default class Home extends Component {\n    render() : JSX.Element {\n        return (\n            <>\n                <Header />\n                <Content />\n                <Footer />\n            </>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './pages/Home/Home';\nimport * as serviceWorker from './serviceWorker';\nimport './custom.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Home />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}